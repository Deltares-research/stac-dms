name: Deltares Fairdata Frontend CI
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
# When this action will be executed
on:
  # Automatically trigger it when detected changes in repo
  push:
    branches:
      - main
      - prod
    paths:
      - "deltares-fairdata/frontend/**"
      - ".github/workflows/deltares_fairdata_frontend_ci.yml"
  pull_request:
    branches:
      - main
      - prod
    paths:
      - "deltares-fairdata/frontend/**"
      - ".github/workflows/deltares_fairdata_frontend_ci.yml"
        # Allow manual trigger
  workflow_dispatch:

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write
  id-token: write

env:
  REGISTRY_ADDRESS: containers.deltares.nl
  HARBOR_PROJECT: fair-data
  TAG: ${{ github.ref == 'refs/heads/prod' && 'prod' || 'dev' }}
  API_URL: ${{ github.ref == 'refs/heads/prod' && 'https://deltares-fairdata.com' || 'https://dev.deltares-fairdata.com' }}
  AWS_REGION: eu-west-1
  CLUSTER_NAME: ${{ github.ref == 'refs/heads/prod' && 'dms-cluster-prod' || 'dms-cluster-dev' }}
  TASK_DEFINITION_NAME: ${{ github.ref == 'refs/heads/prod' && 'dms-frontend-prod' || 'dms-frontend-dev' }}
  SERVICE_NAME: frontend-service

jobs:
  build-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2
      - name: Create .env file
        run: echo "API_URL=${{ env.API_URL }}" > deltares-fairdata/frontend/.env
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_ADDRESS }}
          username: ${{ secrets.HARBOR_USER }}
          password: ${{ secrets.HARBOR_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: deltares-fairdata/frontend
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production-stage
          push: ${{ github.event_name != 'pull_request'}} # Don't push on pull requests, only on push
          tags: |
            ${{ env.REGISTRY_ADDRESS }}/${{ env.HARBOR_PROJECT }}/frontend:${{ github.sha }}
            ${{ env.REGISTRY_ADDRESS }}/${{ env.HARBOR_PROJECT }}/frontend:${{ env.TAG }}

      # When pushing we also restart the frontend service with the new image
      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v4
        if: ${{ github.event_name != 'pull_request'}}
        with:
          role-to-assume: arn:aws:iam::654654181948:role/github-actions-terraform-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        if: ${{ github.event_name != 'pull_request'}}
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_NAME }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        if: ${{ github.event_name != 'pull_request'}}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: frontend
          image: ${{ env.REGISTRY_ADDRESS }}/${{ env.HARBOR_PROJECT }}/frontend:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        if: ${{ github.event_name != 'pull_request'}}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true
