import { z } from "zod";
const primitiveSchema = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.null(),
]);
export function primitive() {
    return primitiveSchema;
}
const jsonSchema = z.lazy(() => z.union([primitive(), z.array(jsonSchema), z.record(jsonSchema)]));
export function json() {
    return jsonSchema;
}
const objectSchema = z.record(jsonSchema);
export function object() {
    return objectSchema;
}
const arraySchema = z.array(jsonSchema);
export function array() {
    return arraySchema;
}
export const stringifiedJsonSchema = z
    .string()
    .transform((str, ctx) => {
    try {
        return JSON.parse(str);
    }
    catch (e) {
        ctx.addIssue({ code: "custom", message: "Invalid JSON" });
        return z.NEVER;
    }
});
export function stringifiedJson() {
    return stringifiedJsonSchema;
}
//# sourceMappingURL=json.js.map