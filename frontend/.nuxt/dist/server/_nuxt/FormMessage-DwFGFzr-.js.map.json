{"file":"FormMessage-DwFGFzr-.js","mappings":";;;;;;AAGO,MAAM,0BACT,OAAO;;;;;;;;AAQX,UAAM,QAAQ;AAId,UAAM,KAAK;AACX,YAAQ,yBAAyB,EAAE;;;;;;;;;;;;;;;;ACb5B,SAAS,eAAe;AACvB,QAAA,eAAe,OAAO,eAAe;AACrC,QAAA,mBAAmB,OAAO,uBAAuB;AAEvD,QAAM,aAAa;AAAA,IACjB,OAAO,gBAAgB;AAAA,IACvB,SAAS,gBAAgB;AAAA,IACzB,WAAW,kBAAkB;AAAA,IAC7B,OAAO,cAAc;AAAA,EAAA;AAGvB,MAAI,CAAC;AACG,UAAA,IAAI,MAAM,gDAAgD;AAE5D,QAAA,EAAE,KAAS,IAAA;AACjB,QAAM,KAAK;AAEJ,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA,YAAY,GAAG,EAAE;AAAA,IACjB,mBAAmB,GAAG,EAAE;AAAA,IACxB,eAAe,GAAG,EAAE;AAAA,IACpB,GAAG;AAAA,EAAA;AAEP;;;;;;;;;;;ACtBA,UAAM,QAAQ;AAEd,UAAM,EAAE,OAAO,WAAW,IAAI,aAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACL3C,UAAM,EAAE,OAAO,YAAY,mBAAmB,cAAA,IAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACChE,UAAM,EAAE,MAAM,cAAc,IAAI,aAAa;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../components/ui/form/FormItem.vue","../../../../components/ui/form/useFormField.ts","../../../../components/ui/form/FormLabel.vue","../../../../components/ui/form/FormControl.vue","../../../../components/ui/form/FormMessage.vue"],"sourcesContent":["<script lang=\"ts\">\nimport type { HTMLAttributes, InjectionKey } from 'vue'\n\nexport const FORM_ITEM_INJECTION_KEY\n  = Symbol() as InjectionKey<string>\n</script>\n\n<script lang=\"ts\" setup>\nimport { provide } from 'vue'\nimport { useId } from 'radix-vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<{\n  class?: HTMLAttributes['class']\n}>()\n\nconst id = useId()\nprovide(FORM_ITEM_INJECTION_KEY, id)\n</script>\n\n<template>\n  <div :class=\"cn('space-y-2', props.class)\">\n    <slot />\n  </div>\n</template>\n","import { FieldContextKey, useFieldError, useIsFieldDirty, useIsFieldTouched, useIsFieldValid } from 'vee-validate'\nimport { inject } from 'vue'\nimport { FORM_ITEM_INJECTION_KEY } from './FormItem.vue'\n\nexport function useFormField() {\n  const fieldContext = inject(FieldContextKey)\n  const fieldItemContext = inject(FORM_ITEM_INJECTION_KEY)\n\n  const fieldState = {\n    valid: useIsFieldValid(),\n    isDirty: useIsFieldDirty(),\n    isTouched: useIsFieldTouched(),\n    error: useFieldError(),\n  }\n\n  if (!fieldContext)\n    throw new Error('useFormField should be used within <FormField>')\n\n  const { name } = fieldContext\n  const id = fieldItemContext\n\n  return {\n    id,\n    name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n","<script lang=\"ts\" setup>\nimport type { HTMLAttributes } from 'vue'\nimport type { LabelProps } from 'radix-vue'\nimport { useFormField } from './useFormField'\nimport { cn } from '@/lib/utils'\nimport { Label } from '@/components/ui/label'\n\nconst props = defineProps<LabelProps & { class?: HTMLAttributes['class'] }>()\n\nconst { error, formItemId } = useFormField()\n</script>\n\n<template>\n  <Label\n    :class=\"cn(\n      error && 'text-destructive',\n      props.class,\n    )\"\n    :for=\"formItemId\"\n  >\n    <slot />\n  </Label>\n</template>\n","<script lang=\"ts\" setup>\nimport { Slot } from 'radix-vue'\nimport { useFormField } from './useFormField'\n\nconst { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n</script>\n\n<template>\n  <Slot\n    :id=\"formItemId\"\n    :aria-describedby=\"!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`\"\n    :aria-invalid=\"!!error\"\n  >\n    <slot />\n  </Slot>\n</template>\n","<script lang=\"ts\" setup>\nimport { ErrorMessage } from 'vee-validate'\nimport { toValue } from 'vue'\nimport { useFormField } from './useFormField'\n\nconst { name, formMessageId } = useFormField()\n</script>\n\n<template>\n  <ErrorMessage\n    :id=\"formMessageId\"\n    as=\"p\"\n    :name=\"toValue(name)\"\n    class=\"text-sm font-medium text-destructive\"\n  />\n</template>\n"],"version":3}