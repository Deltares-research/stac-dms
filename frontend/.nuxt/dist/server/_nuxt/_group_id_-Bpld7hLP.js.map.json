{"file":"_group_id_-Bpld7hLP.js","mappings":"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","names":["_withAsyncContext"],"sources":["../../../../components/keywords/DeleteKeywordGroup.vue","../../../../components/keywords/DeleteKeyword.vue","../../../../components/keywords/UpdateKeyword.vue","../../../../components/keywords/UpdateKeywordGroup.vue","../../../../pages/keywords/groups/[group_id].vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { useForm } from \"vee-validate\"\nimport { toast } from \"../ui/toast\"\nimport { Trash2 } from \"lucide-vue-next\"\n\nlet { keywordgroup_id } = defineProps<{\n  keywordgroup_id: string\n}>()\n\nlet { $api } = useNuxtApp()\n\nlet deleteForm = useForm()\n\nlet onSubmit = deleteForm.handleSubmit(async () => {\n  await $api(`/keywordgroup/{keywordgroup_id}`, {\n    method: \"delete\",\n    path: {\n      keywordgroup_id,\n    },\n  })\n\n  toast({\n    title: \"Keywordgroup deleted\",\n  })\n\n  await navigateTo(\"/keywords/groups\")\n})\n</script>\n\n<template>\n  <form @submit=\"onSubmit\">\n    <Button variant=\"outline\" size=\"icon\" type=\"submit\" class=\"w-8 h-8\">\n      <Trash2 class=\"w-4 h-4\" />\n    </Button>\n  </form>\n</template>\n","<script setup lang=\"ts\">\nimport { X } from \"lucide-vue-next\"\nimport { useForm } from \"vee-validate\"\nimport type { Keyword } from \"~/lib/types\"\nimport { toast } from \"../ui/toast\"\n\nlet { keyword, onDelete } = defineProps<{\n  keyword: Keyword\n  onDelete?(): void\n}>()\n\nlet { $api } = useNuxtApp()\n\nlet deleteForm = useForm()\n\nlet onSubmit = deleteForm.handleSubmit(async () => {\n  await $api(\"/keyword/{keyword_id}\", {\n    method: \"delete\",\n    path: {\n      keyword_id: keyword.id,\n    },\n  })\n\n  toast({\n    title: \"Keyword deleted\",\n  })\n\n  onDelete?.()\n})\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" class=\"opacity-0 group-hover:opacity-100\">\n    <Button variant=\"destructive\" size=\"icon\" type=\"submit\" class=\"w-8 h-8\">\n      <X class=\"w-4 h-4\" />\n    </Button>\n  </form>\n</template>\n","<script setup lang=\"ts\">\nimport { toTypedSchema } from \"@vee-validate/zod\"\nimport { useForm } from \"vee-validate\"\nimport { z } from \"zod\"\nimport type { Keyword } from \"~/lib/types\"\nimport { toast } from \"../ui/toast\"\nimport { CheckIcon } from \"lucide-vue-next\"\n\nlet { keyword, onUpdate } = defineProps<{\n  keyword: Keyword\n  onUpdate?(): void\n}>()\n\nlet { $api } = useNuxtApp()\n\nlet updateSchema = toTypedSchema(\n  z.object({\n    nl_keyword: z.string().min(2),\n  }),\n)\n\nlet form = useForm({\n  validationSchema: updateSchema,\n  initialValues: {\n    nl_keyword: keyword.nl_keyword ?? undefined,\n  },\n})\n\nlet onSubmit = form.handleSubmit(async (values) => {\n  await $api(`/keyword/{keyword_id}`, {\n    method: \"put\",\n    body: values,\n    path: {\n      keyword_id: keyword.id,\n    },\n  })\n\n  toast({\n    title: \"Keyword updated\",\n  })\n\n  onUpdate?.()\n})\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" class=\"flex items-center gap-1.5 w-full\">\n    <FormField v-slot=\"{ componentField }\" name=\"nl_keyword\">\n      <FormItem class=\"w-full\">\n        <Input\n          v-bind=\"componentField\"\n          class=\"border-0 -ml-3 h-8 !ring-0 rounded-none outline-none\"\n        />\n      </FormItem>\n    </FormField>\n\n    <Button\n      v-if=\"form.isFieldDirty('nl_keyword')\"\n      type=\"submit\"\n      variant=\"outline\"\n      size=\"icon\"\n      class=\"flex-shrink-0 w-8 h-8\"\n    >\n      <CheckIcon class=\"w-4 h-4 text-emerald-500\" />\n    </Button>\n  </form>\n</template>\n","<script setup lang=\"ts\">\nimport { toTypedSchema } from \"@vee-validate/zod\"\nimport { useForm } from \"vee-validate\"\nimport { z } from \"zod\"\nimport type { Facility, KeywordGroup } from \"~/lib/types\"\nimport { toast } from \"../ui/toast\"\nimport { CheckIcon } from \"lucide-vue-next\"\n\nlet { group, onUpdate } = defineProps<{\n  group: KeywordGroup\n  onUpdate?(): void\n}>()\n\nlet { $api } = useNuxtApp()\n\nlet updateSchema = toTypedSchema(\n  z.object({\n    group_name_nl: z.string().min(2),\n  }),\n)\n\nlet form = useForm({\n  validationSchema: updateSchema,\n  initialValues: {\n    group_name_nl: group.group_name_nl ?? undefined,\n  },\n})\n\nlet onSubmit = form.handleSubmit(async (values) => {\n  await $api(`/keywordgroup/{keywordgroup_id}`, {\n    method: \"put\",\n    body: values,\n    path: {\n      keywordgroup_id: group.id,\n    },\n  })\n\n  toast({\n    title: \"Keyword group updated\",\n  })\n\n  onUpdate?.()\n})\n</script>\n\n<template>\n  <form @submit=\"onSubmit\" class=\"flex items-center gap-1.5 w-full\">\n    <FormField v-slot=\"{ componentField }\" name=\"group_name_nl\">\n      <FormItem class=\"w-full\">\n        <Input\n          v-bind=\"componentField\"\n          class=\"border-0 -ml-3 h-8 !ring-0 rounded-none outline-none text-2xl font-bold\"\n        />\n      </FormItem>\n    </FormField>\n\n    <Button\n      v-if=\"form.isFieldDirty('group_name_nl')\"\n      type=\"submit\"\n      variant=\"outline\"\n      size=\"icon\"\n      class=\"flex-shrink-0 w-8 h-8\"\n    >\n      <CheckIcon class=\"w-4 h-4 text-emerald-500\" />\n    </Button>\n  </form>\n</template>\n","<script setup lang=\"ts\">\nimport { toTypedSchema } from \"@vee-validate/zod\"\nimport { useForm } from \"vee-validate\"\nimport { z } from \"zod\"\nimport DeleteKeywordGroup from \"~/components/keywords/DeleteKeywordGroup.vue\"\nimport Keyword from \"~/components/keywords/Keyword.vue\"\nimport UpdateKeywordGroup from \"~/components/keywords/UpdateKeywordGroup.vue\"\nimport { toast } from \"~/components/ui/toast\"\n\nlet route = useRoute()\n\nlet { $api } = useNuxtApp()\n\nlet { data, refresh } = await useApi(\"/keywords\", {\n  query: {\n    keyword_group_id: route.params.group_id as string,\n  },\n})\n\nlet keywordsgroup = computed(() => {\n  return data.value?.[0]\n})\n\nlet createKeywordFormSchema = toTypedSchema(\n  z.object({\n    nl_keyword: z.string().min(2),\n    en_keyword: z.string().min(2),\n    external_id: z.string().min(2).optional(),\n  }),\n)\n\nlet createKeywordForm = useForm({\n  validationSchema: createKeywordFormSchema,\n})\n\nlet onSubmitCreateKeywordgoupForm = createKeywordForm.handleSubmit(\n  async (values) => {\n    await $api(\"/keyword\", {\n      method: \"post\",\n      body: {\n        ...values,\n        group_id: route.params.group_id as string,\n      },\n    })\n\n    toast({\n      title: \"Keyword created\",\n    })\n\n    await refresh()\n  },\n)\n</script>\n\n<template>\n  <div v-if=\"keywordsgroup\">\n    <div\n      class=\"uppercase text-muted-foreground text-xs font-semibold tracking-wider\"\n    >\n      Keyword Group\n    </div>\n    <div class=\"mt-3 flex items-center justify-between mb-4 gap-1.5\">\n      <UpdateKeywordGroup :group=\"keywordsgroup\" />\n      <DeleteKeywordGroup :keywordgroup_id=\"keywordsgroup.id\" />\n    </div>\n    <ul class=\"flex flex-col\">\n      <li\n        v-for=\"keyword in keywordsgroup?.keywords\"\n        :key=\"keyword.id\"\n        class=\"border-b last:border-0 py-1.5\"\n      >\n        <Keyword :keyword=\"keyword\" @delete=\"refresh\" @update=\"refresh\" />\n      </li>\n    </ul>\n\n    <hr class=\"my-8\" />\n\n    <h2 class=\"font-medium mb-4\">Create keyword</h2>\n\n    <form @submit=\"onSubmitCreateKeywordgoupForm\">\n      <FormField v-slot=\"{ componentField }\" name=\"nl_keyword\">\n        <FormItem>\n          <FormLabel>Keyword NL</FormLabel>\n          <FormControl>\n            <Input type=\"text\" v-bind=\"componentField\" />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      </FormField>\n\n      <FormField v-slot=\"{ componentField }\" name=\"en_keyword\">\n        <FormItem>\n          <FormLabel>Keyword EN</FormLabel>\n          <FormControl>\n            <Input type=\"text\" v-bind=\"componentField\" />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      </FormField>\n\n      <Button type=\"submit\" class=\"mt-5\">Create</Button>\n    </form>\n  </div>\n</template>\n"],"version":3}