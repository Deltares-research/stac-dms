{"file":"index-Bj3F3UMs.js","mappings":"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","names":["_withAsyncContext","Button"],"sources":["../../../../pages/collections/index.vue"],"sourcesContent":["<template>\n  <Card>\n    <CardHeader>\n      <CardTitle>Collections</CardTitle>\n      <CardDescription\n        >List of data sets collections, which you are allowed to edit\n      </CardDescription>\n    </CardHeader>\n    <CardContent>\n      <div class=\"flex justify-end\">\n        <Button>\n          <NuxtLink to=\"/collections/create\">Add collection</NuxtLink>\n        </Button>\n      </div>\n      <DataTable :columns=\"collectionColumns\" :data=\"collections\" />\n    </CardContent>\n  </Card>\n</template>\n\n<script setup lang=\"ts\">\nimport DataTable from \"@/components/table/DataTable.vue\"\nimport { ArrowUpDown, Pencil, Trash2 } from \"lucide-vue-next\"\nimport { Button } from \"@/components/ui/button\"\nimport type { ColumnDef } from \"@tanstack/vue-table\"\nimport type { components } from \"#open-fetch-schemas/api\"\nimport { h, onMounted, ref } from \"vue\"\nimport { useNuxtApp, useRouter } from \"nuxt/app\"\nimport { collectionTypes } from \"@/lib/collectionTypes\"\n\nconst router = useRouter()\nconst { $api } = useNuxtApp()\nconst collections = ref([])\nlet { data: keywords } = await useApi(\"/facilities\")\nonMounted(async () => {\n  await new Promise((r) => setTimeout(r, 1000))\n  let retrievedCollections = []\n  let url = \"/collections\"\n  while (url) {\n    let pos = url.search(\"/api\") //should be fixed in the backend!\n    url = pos != -1 ? url.substring(pos) : url\n    url = await retrieveCollection(url, retrievedCollections)\n  }\n  collections.value = retrievedCollections\n})\n\nasync function retrieveCollection(\n  url: string,\n  collections: [],\n): Promise<string> {\n  try {\n    const collectionsData = await $api(url)\n    collectionsData.collections.forEach((item) => collections.push(item))\n    return collectionsData.links[3].href\n  } catch (e) {\n    return \"\"\n  }\n}\n\nasync function updateCollection(id: string) {\n  router.push(\"/collections/update/\" + id)\n}\n\nasync function deleteCollection(id: string) {\n  router.push(\"/collections/delete/\" + id)\n}\n\nconst collectionColumns: ColumnDef<\n  components[\"schemas\"][\"stac_pydantic__api__collection__Collection\"]\n>[] = [\n  {\n    accessorKey: \"title\",\n    header: ({ column }) => {\n      return h(\n        Button,\n        {\n          variant: \"ghost\",\n          onClick: () => column.toggleSorting(column.getIsSorted() === \"asc\"),\n        },\n        () => [\"Title\", h(ArrowUpDown, { class: \"ml-2 h-4 w-4\" })],\n      )\n    },\n    cell: ({ row }) => row.getValue(\"title\"),\n  },\n  {\n    accessorKey: \"description\",\n    header: ({ column }) => {\n      return h(\n        Button,\n        {\n          variant: \"ghost\",\n          onClick: () => column.toggleSorting(column.getIsSorted() === \"asc\"),\n        },\n        () => [\"Description\", h(ArrowUpDown, { class: \"ml-2 h-4 w-4\" })],\n      )\n    },\n    cell: ({ row }) => {\n      return row.getValue(\"description\")\n    },\n  },\n  {\n    accessorKey: \"keywords\",\n    header: ({ column }) => {\n      return h(\n        Button,\n        {\n          variant: \"ghost\",\n          onClick: () => column.toggleSorting(column.getIsSorted() === \"asc\"),\n        },\n        () => [\"Collection type\", h(ArrowUpDown, { class: \"ml-2 h-4 w-4\" })],\n      )\n    },\n    cell: ({ row }) => {\n      const key = row.getValue(\"keywords\")[0]\n      const selectedItem = collectionTypes.find((item) => item.value == key)\n      return selectedItem.label\n    },\n  },\n  {\n    accessorKey: \"links\",\n    header: ({ column }) => {\n      return h(\n        Button,\n        {\n          variant: \"ghost\",\n          onClick: () => column.toggleSorting(column.getIsSorted() === \"asc\"),\n        },\n        () => [\"Keywords\", h(ArrowUpDown, { class: \"ml-2 h-4 w-4\" })],\n      )\n    },\n    cell: ({ row }) => {\n      const links = row.original.links.find((item) => item.rel == \"keywords\")\n      if (links === undefined) return \"No keywords\"\n      const keywordDescription = keywords.value.find(\n        (item) => item.id == links.id,\n      )\n      if (keywordDescription === undefined) return \"No keywords\"\n      return keywordDescription.name\n    },\n  },\n  {\n    id: \"edit\",\n    cell: ({ row }) => {\n      return h(\n        Button,\n        {\n          variant: \"ghost\",\n          onClick: () => {\n            updateCollection(row.original.id)\n          },\n        },\n        () => [\"Edit\", h(Pencil, { class: \"ml-2 h-4 w-4\" })],\n      )\n    },\n  },\n  {\n    id: \"delete\",\n    cell: ({ row }) => {\n      return h(\n        Button,\n        {\n          variant: \"ghost\",\n          onClick: () => {\n            deleteCollection(row.original.id)\n          },\n        },\n        () => [\"Delete\", h(Trash2, { class: \"ml-2 h-4 w-4\" })],\n      )\n    },\n  },\n]\n</script>\n\n<style scoped></style>\n"],"version":3}