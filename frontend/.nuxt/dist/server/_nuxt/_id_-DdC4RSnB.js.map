{"version":3,"file":"_id_-DdC4RSnB.js","sources":["../../../../pages/collections/update/[id].vue"],"sourcesContent":["<template>\n  <div class=\"justify-end\">\n    <CollectionCardForm\n      card-title=\"Edit collection\"\n      button-title=\"update\"\n      :errors=\"errors\"\n      @update=\"updateCollection\"\n      :title=\"title\"\n      :description=\"description\"\n      :collectionType=\"selectedCollectionType\"\n      :keywordFacility=\"selectedKeywordsFacility\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { Collection } from \"@/lib/collection\"\nimport CollectionCardForm from \"@/components/collections/CollectionCardForm.vue\"\nimport { useNuxtApp, useRoute, useRouter } from \"nuxt/app\"\nimport { ref } from \"vue\"\n\nconst { $api } = useNuxtApp()\n\nconst errors = ref(\"\")\nconst title = ref(\"\")\nconst description = ref(\"\")\nconst selectedCollectionType = ref(\"\")\nconst selectedKeywordsFacility = ref(\"\")\n\nconst route = useRoute()\nconst data = await $api(\"/collections/{collection_id}\", {\n  path: {\n    collection_id: route.params.id,\n  },\n})\ntitle.value = data.title\ndescription.value = data.description\nselectedCollectionType.value = data.keywords[0]\nconst keywordsLink = data.links.find((item) => item.rel == \"keywords\")\nselectedKeywordsFacility.value =\n  keywordsLink !== undefined ? keywordsLink.id : \"No keywords\"\n\nasync function updateCollection(emitedCollection: Collection) {\n  const updatedCollection = {\n    type: \"Collection\",\n    stac_version: \"1.0.0\",\n    id: data.id,\n    title: emitedCollection.title,\n    description: emitedCollection.description,\n    keywords: [emitedCollection.collectionType],\n    license: \"proprietary\",\n    extent: {\n      spatial: {\n        bbox: [[-180, -56, 180, 83]],\n      },\n      temporal: {\n        interval: [[]],\n      },\n    },\n    links: [],\n  }\n  if (emitedCollection.keywordsFacility !== \"No keywords\") {\n    updatedCollection.links.push({\n      rel: \"keywords\",\n      href: \"/facilities/\" + emitedCollection.keywordsFacility,\n      type: \"application/json\",\n      id: emitedCollection.keywordsFacility,\n    })\n  }\n  try {\n    errors.value = \"\"\n    const data = await $api(\"/collections/{id}\", {\n      method: \"PUT\",\n      path: {\n        id: route.params.id,\n      },\n      body: updatedCollection,\n    })\n  } catch (e) {\n    errors.value = \"It was not possible to update the collection\"\n    return\n  }\n\n  const router = useRouter()\n  router.push(\"/collections\")\n}\n</script>\n\n<style scoped></style>\n"],"names":["_withAsyncContext","data"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBM,UAAA,EAAE,SAAS;AAEX,UAAA,SAAS,IAAI,EAAE;AACf,UAAA,QAAQ,IAAI,EAAE;AACd,UAAA,cAAc,IAAI,EAAE;AACpB,UAAA,yBAAyB,IAAI,EAAE;AAC/B,UAAA,2BAA2B,IAAI,EAAE;AAEvC,UAAM,QAAQ;AACR,UAAA,QAAO,CAAA,QAAA,SAAA,IAAAA,iBAAA,MAAM,KAAK,gCAAgC;AAAA,MACtD,MAAM;AAAA,QACJ,eAAe,MAAM,OAAO;AAAA,MAC9B;AAAA,IAAA,CACD,CAAA;AACD,UAAM,QAAQ,KAAK;AACnB,gBAAY,QAAQ,KAAK;AACF,2BAAA,QAAQ,KAAK,SAAS,CAAC;AACxC,UAAA,eAAe,KAAK,MAAM,KAAK,CAAC,SAAS,KAAK,OAAO,UAAU;AACrE,6BAAyB,QACvB,iBAAiB,SAAY,aAAa,KAAK;AAEjD,mBAAe,iBAAiB,kBAA8B;AAC5D,YAAM,oBAAoB;AAAA,QACxB,MAAM;AAAA,QACN,cAAc;AAAA,QACd,IAAI,KAAK;AAAA,QACT,OAAO,iBAAiB;AAAA,QACxB,aAAa,iBAAiB;AAAA,QAC9B,UAAU,CAAC,iBAAiB,cAAc;AAAA,QAC1C,SAAS;AAAA,QACT,QAAQ;AAAA,UACN,SAAS;AAAA,YACP,MAAM,CAAC,CAAC,MAAM,KAAK,KAAK,EAAE,CAAC;AAAA,UAC7B;AAAA,UACA,UAAU;AAAA,YACR,UAAU,CAAC,CAAA,CAAE;AAAA,UACf;AAAA,QACF;AAAA,QACA,OAAO,CAAC;AAAA,MAAA;AAEN,UAAA,iBAAiB,qBAAqB,eAAe;AACvD,0BAAkB,MAAM,KAAK;AAAA,UAC3B,KAAK;AAAA,UACL,MAAM,iBAAiB,iBAAiB;AAAA,UACxC,MAAM;AAAA,UACN,IAAI,iBAAiB;AAAA,QAAA,CACtB;AAAA,MACH;AACI,UAAA;AACF,eAAO,QAAQ;AACTC,cAAAA,QAAO,MAAM,KAAK,qBAAqB;AAAA,UAC3C,QAAQ;AAAA,UACR,MAAM;AAAA,YACJ,IAAI,MAAM,OAAO;AAAA,UACnB;AAAA,UACA,MAAM;AAAA,QAAA,CACP;AAAA,eACM,GAAG;AACV,eAAO,QAAQ;AACf;AAAA,MACF;AAEA,YAAM,SAAS;AACf,aAAO,KAAK,cAAc;AAAA,IAC5B;;;;;;;;;;;;;;;;;;;;;;;"}