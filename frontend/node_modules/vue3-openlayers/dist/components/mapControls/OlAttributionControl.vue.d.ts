import { Attribution } from 'ol/control';
import { DefineComponent, ComputedRef, ComponentOptionsMixin, PublicProps, ExtractPropTypes, PropType } from 'vue';

declare const _default: DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    className?: string;
    target?: HTMLElement;
    collapsible?: boolean;
    collapsed?: boolean;
    tipLabel?: string;
    label?: string;
    expandClassName?: string;
    collapseLabel?: string;
    collapseClassName?: string;
    render?: () => void;
}>, {
    className: string;
    collapsed: boolean;
    tipLabel: string;
    label: string;
    expandClassName: string;
    collapseLabel: string;
    collapseClassName: string;
}>, {
    control: ComputedRef<Attribution>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly< ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    className?: string;
    target?: HTMLElement;
    collapsible?: boolean;
    collapsed?: boolean;
    tipLabel?: string;
    label?: string;
    expandClassName?: string;
    collapseLabel?: string;
    collapseClassName?: string;
    render?: () => void;
}>, {
    className: string;
    collapsed: boolean;
    tipLabel: string;
    label: string;
    expandClassName: string;
    collapseLabel: string;
    collapseClassName: string;
}>>>, {
    label: string;
    className: string;
    collapsed: boolean;
    tipLabel: string;
    expandClassName: string;
    collapseLabel: string;
    collapseClassName: string;
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
