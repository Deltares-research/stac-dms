import { default as HeatmapLayer } from 'ol/layer/Heatmap';
import { Extent } from 'ol/extent';
import { LayersCommonProps } from './LayersCommonProps';
import { DefineComponent, ShallowRef, ComponentOptionsMixin, PublicProps, ExtractPropTypes, PropType } from 'vue';
import { Feature } from 'ol';
import { Geometry } from 'ol/geom';
import { Vector } from 'ol/source';

type WeightFunction = () => number;
declare function __VLS_template(): {
    default?(_: {}): any;
};
declare const __VLS_component: DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<LayersCommonProps & {
    weight?: string | WeightFunction;
    extent?: Extent;
    blur?: number;
    radius?: number;
    gradient?: string[];
}>, {
    weight: string;
    radius: number;
    blur: number;
    gradient: () => string[];
    className: string;
    opacity: number;
    visible: boolean;
    properties: () => {};
}>, {
    heatmapLayer: ShallowRef<HeatmapLayer< Feature<Geometry>, Vector<Feature<Geometry>>>>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly< ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<LayersCommonProps & {
    weight?: string | WeightFunction;
    extent?: Extent;
    blur?: number;
    radius?: number;
    gradient?: string[];
}>, {
    weight: string;
    radius: number;
    blur: number;
    gradient: () => string[];
    className: string;
    opacity: number;
    visible: boolean;
    properties: () => {};
}>>>, {
    properties: () => Record<string, unknown>;
    radius: number;
    className: string;
    opacity: number;
    visible: boolean;
    weight: string | WeightFunction;
    blur: number;
    gradient: string[];
}, {}>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
