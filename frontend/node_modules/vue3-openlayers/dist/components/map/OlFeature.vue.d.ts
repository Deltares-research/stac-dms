import { Ref, DefineComponent, ComponentOptionsMixin, PublicProps, ExtractPropTypes, PropType } from 'vue';
import { default as Feature, FeatureOnSignature } from 'ol/Feature';
import { default as Geometry } from 'ol/geom/Geometry';
import { EventsKey, Listener } from 'ol/events';
import { StyleLike, StyleFunction } from 'ol/style/Style';
import { default as __DTS_DEFAULT_0__ } from 'ol/events/Event';

declare function __VLS_template(): {
    default?(_: {}): any;
};
declare const __VLS_component: DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    properties?: Geometry | Record<string, unknown> | unknown[];
}>, {
    properties: () => unknown[];
}>, {
    feature: Ref<{
        on: FeatureOnSignature<EventsKey>;
        once: FeatureOnSignature<EventsKey>;
        un: FeatureOnSignature<void>;
        clone: () => Feature<Geometry>;
        getGeometry: () => Geometry | undefined;
        getId: () => number | string | undefined;
        getGeometryName: () => string;
        getStyle: () => StyleLike | undefined;
        getStyleFunction: () => StyleFunction | undefined;
        setGeometry: (geometry: Geometry | undefined) => void;
        setStyle: (style?: StyleLike | undefined) => void;
        setId: (id: number | string | undefined) => void;
        setGeometryName: (name: string) => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: Listener) => void;
        removeChangeListener: (key: string, listener: Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: Listener) => void;
        dispatchEvent: (event: __DTS_DEFAULT_0__ | string) => boolean | undefined;
        getListeners: (type: string) => Array< Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: Listener) => void;
        dispose: () => void;
    }, Feature<Geometry> | {
        on: FeatureOnSignature<EventsKey>;
        once: FeatureOnSignature<EventsKey>;
        un: FeatureOnSignature<void>;
        clone: () => Feature<Geometry>;
        getGeometry: () => Geometry | undefined;
        getId: () => number | string | undefined;
        getGeometryName: () => string;
        getStyle: () => StyleLike | undefined;
        getStyleFunction: () => StyleFunction | undefined;
        setGeometry: (geometry: Geometry | undefined) => void;
        setStyle: (style?: StyleLike | undefined) => void;
        setId: (id: number | string | undefined) => void;
        setGeometryName: (name: string) => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: Listener) => void;
        removeChangeListener: (key: string, listener: Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: Listener) => void;
        dispatchEvent: (event: __DTS_DEFAULT_0__ | string) => boolean | undefined;
        getListeners: (type: string) => Array< Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: Listener) => void;
        dispose: () => void;
    }>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly< ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    properties?: Geometry | Record<string, unknown> | unknown[];
}>, {
    properties: () => unknown[];
}>>>, {
    properties: Geometry | Record<string, unknown> | unknown[];
}, {}>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
