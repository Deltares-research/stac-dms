declare const zu: {
    geojson: {
        (): import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodObject<{
            bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
            type: import("zod").ZodLiteral<"LineString">;
            coordinates: import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">;
        }, "strict", import("zod").ZodTypeAny, {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, import("zod").ZodObject<{
            bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
            type: import("zod").ZodLiteral<"MultiLineString">;
            coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">;
        }, "strict", import("zod").ZodTypeAny, {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, import("zod").ZodObject<{
            bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
            type: import("zod").ZodLiteral<"MultiPoint">;
            coordinates: import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">;
        }, "strict", import("zod").ZodTypeAny, {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, import("zod").ZodObject<{
            bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
            type: import("zod").ZodLiteral<"MultiPolygon">;
            coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">, "many">;
        }, "strict", import("zod").ZodTypeAny, {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, import("zod").ZodObject<{
            bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
            type: import("zod").ZodLiteral<"Point">;
            coordinates: import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>;
        }, "strict", import("zod").ZodTypeAny, {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, import("zod").ZodObject<{
            bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
            type: import("zod").ZodLiteral<"Polygon">;
            coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">;
        }, "strict", import("zod").ZodTypeAny, {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, import("zod").ZodType<import("./geojson/geometry.js").GeoJsonGeometryCollection, import("zod").ZodTypeDef, import("./geojson/geometry.js").GeoJsonGeometryCollection>]>, import("zod").ZodObject<{
            bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
            type: import("zod").ZodLiteral<"Feature">;
            geometry: import("zod").ZodNullable<import("zod").ZodUnion<[import("zod").ZodObject<{
                bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                type: import("zod").ZodLiteral<"LineString">;
                coordinates: import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">;
            }, "strict", import("zod").ZodTypeAny, {
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }, {
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }>, import("zod").ZodObject<{
                bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                type: import("zod").ZodLiteral<"MultiLineString">;
                coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">;
            }, "strict", import("zod").ZodTypeAny, {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }, {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }>, import("zod").ZodObject<{
                bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                type: import("zod").ZodLiteral<"MultiPoint">;
                coordinates: import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">;
            }, "strict", import("zod").ZodTypeAny, {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }, {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }>, import("zod").ZodObject<{
                bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                type: import("zod").ZodLiteral<"MultiPolygon">;
                coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">, "many">;
            }, "strict", import("zod").ZodTypeAny, {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }, {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }>, import("zod").ZodObject<{
                bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                type: import("zod").ZodLiteral<"Point">;
                coordinates: import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>;
            }, "strict", import("zod").ZodTypeAny, {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }, {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }>, import("zod").ZodObject<{
                bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                type: import("zod").ZodLiteral<"Polygon">;
                coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">;
            }, "strict", import("zod").ZodTypeAny, {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }, {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }>, import("zod").ZodType<import("./geojson/geometry.js").GeoJsonGeometryCollection, import("zod").ZodTypeDef, import("./geojson/geometry.js").GeoJsonGeometryCollection>]>>;
            id: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>>;
            properties: import("zod").ZodNullable<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodType<import("./json/json.js").Json, import("zod").ZodTypeDef, import("./json/json.js").Json>>>;
        }, "strict", import("zod").ZodTypeAny, {
            type: "Feature";
            geometry: {
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | ({
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } & {
                type: "GeometryCollection";
                geometries: ({
                    type: "LineString";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiLineString";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Point";
                    coordinates: [number, number] | [number, number, number];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPoint";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Polygon";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPolygon";
                    coordinates: ([number, number] | [number, number, number])[][][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | import("./geojson/geometry.js").GeoJsonGeometryCollection)[];
            }) | null;
            properties: Record<string, import("./json/json.js").Json> | null;
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            id?: string | number | undefined;
        }, {
            type: "Feature";
            geometry: {
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | ({
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } & {
                type: "GeometryCollection";
                geometries: ({
                    type: "LineString";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiLineString";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Point";
                    coordinates: [number, number] | [number, number, number];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPoint";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Polygon";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPolygon";
                    coordinates: ([number, number] | [number, number, number])[][][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | import("./geojson/geometry.js").GeoJsonGeometryCollection)[];
            }) | null;
            properties: Record<string, import("./json/json.js").Json> | null;
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            id?: string | number | undefined;
        }>, import("zod").ZodObject<{
            bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
            type: import("zod").ZodLiteral<"FeatureCollection">;
            features: import("zod").ZodArray<import("zod").ZodObject<{
                bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                type: import("zod").ZodLiteral<"Feature">;
                geometry: import("zod").ZodNullable<import("zod").ZodUnion<[import("zod").ZodObject<{
                    bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                    type: import("zod").ZodLiteral<"LineString">;
                    coordinates: import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">;
                }, "strict", import("zod").ZodTypeAny, {
                    type: "LineString";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                }, {
                    type: "LineString";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                }>, import("zod").ZodObject<{
                    bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                    type: import("zod").ZodLiteral<"MultiLineString">;
                    coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">;
                }, "strict", import("zod").ZodTypeAny, {
                    type: "MultiLineString";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                }, {
                    type: "MultiLineString";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                }>, import("zod").ZodObject<{
                    bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                    type: import("zod").ZodLiteral<"MultiPoint">;
                    coordinates: import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">;
                }, "strict", import("zod").ZodTypeAny, {
                    type: "MultiPoint";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                }, {
                    type: "MultiPoint";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                }>, import("zod").ZodObject<{
                    bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                    type: import("zod").ZodLiteral<"MultiPolygon">;
                    coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">, "many">;
                }, "strict", import("zod").ZodTypeAny, {
                    type: "MultiPolygon";
                    coordinates: ([number, number] | [number, number, number])[][][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                }, {
                    type: "MultiPolygon";
                    coordinates: ([number, number] | [number, number, number])[][][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                }>, import("zod").ZodObject<{
                    bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                    type: import("zod").ZodLiteral<"Point">;
                    coordinates: import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>;
                }, "strict", import("zod").ZodTypeAny, {
                    type: "Point";
                    coordinates: [number, number] | [number, number, number];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                }, {
                    type: "Point";
                    coordinates: [number, number] | [number, number, number];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                }>, import("zod").ZodObject<{
                    bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                    type: import("zod").ZodLiteral<"Polygon">;
                    coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">;
                }, "strict", import("zod").ZodTypeAny, {
                    type: "Polygon";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                }, {
                    type: "Polygon";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                }>, import("zod").ZodType<import("./geojson/geometry.js").GeoJsonGeometryCollection, import("zod").ZodTypeDef, import("./geojson/geometry.js").GeoJsonGeometryCollection>]>>;
                id: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>>;
                properties: import("zod").ZodNullable<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodType<import("./json/json.js").Json, import("zod").ZodTypeDef, import("./json/json.js").Json>>>;
            }, "strict", import("zod").ZodTypeAny, {
                type: "Feature";
                geometry: {
                    type: "LineString";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiLineString";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Point";
                    coordinates: [number, number] | [number, number, number];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPoint";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Polygon";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPolygon";
                    coordinates: ([number, number] | [number, number, number])[][][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | ({
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } & {
                    type: "GeometryCollection";
                    geometries: ({
                        type: "LineString";
                        coordinates: ([number, number] | [number, number, number])[];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "MultiLineString";
                        coordinates: ([number, number] | [number, number, number])[][];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "Point";
                        coordinates: [number, number] | [number, number, number];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "MultiPoint";
                        coordinates: ([number, number] | [number, number, number])[];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "Polygon";
                        coordinates: ([number, number] | [number, number, number])[][];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "MultiPolygon";
                        coordinates: ([number, number] | [number, number, number])[][][];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | import("./geojson/geometry.js").GeoJsonGeometryCollection)[];
                }) | null;
                properties: Record<string, import("./json/json.js").Json> | null;
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                id?: string | number | undefined;
            }, {
                type: "Feature";
                geometry: {
                    type: "LineString";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiLineString";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Point";
                    coordinates: [number, number] | [number, number, number];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPoint";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Polygon";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPolygon";
                    coordinates: ([number, number] | [number, number, number])[][][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | ({
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } & {
                    type: "GeometryCollection";
                    geometries: ({
                        type: "LineString";
                        coordinates: ([number, number] | [number, number, number])[];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "MultiLineString";
                        coordinates: ([number, number] | [number, number, number])[][];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "Point";
                        coordinates: [number, number] | [number, number, number];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "MultiPoint";
                        coordinates: ([number, number] | [number, number, number])[];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "Polygon";
                        coordinates: ([number, number] | [number, number, number])[][];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "MultiPolygon";
                        coordinates: ([number, number] | [number, number, number])[][][];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | import("./geojson/geometry.js").GeoJsonGeometryCollection)[];
                }) | null;
                properties: Record<string, import("./json/json.js").Json> | null;
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                id?: string | number | undefined;
            }>, "many">;
        }, "strict", import("zod").ZodTypeAny, {
            type: "FeatureCollection";
            features: {
                type: "Feature";
                geometry: {
                    type: "LineString";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiLineString";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Point";
                    coordinates: [number, number] | [number, number, number];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPoint";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Polygon";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPolygon";
                    coordinates: ([number, number] | [number, number, number])[][][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | ({
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } & {
                    type: "GeometryCollection";
                    geometries: ({
                        type: "LineString";
                        coordinates: ([number, number] | [number, number, number])[];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "MultiLineString";
                        coordinates: ([number, number] | [number, number, number])[][];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "Point";
                        coordinates: [number, number] | [number, number, number];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "MultiPoint";
                        coordinates: ([number, number] | [number, number, number])[];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "Polygon";
                        coordinates: ([number, number] | [number, number, number])[][];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "MultiPolygon";
                        coordinates: ([number, number] | [number, number, number])[][][];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | import("./geojson/geometry.js").GeoJsonGeometryCollection)[];
                }) | null;
                properties: Record<string, import("./json/json.js").Json> | null;
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                id?: string | number | undefined;
            }[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "FeatureCollection";
            features: {
                type: "Feature";
                geometry: {
                    type: "LineString";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiLineString";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Point";
                    coordinates: [number, number] | [number, number, number];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPoint";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Polygon";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPolygon";
                    coordinates: ([number, number] | [number, number, number])[][][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | ({
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } & {
                    type: "GeometryCollection";
                    geometries: ({
                        type: "LineString";
                        coordinates: ([number, number] | [number, number, number])[];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "MultiLineString";
                        coordinates: ([number, number] | [number, number, number])[][];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "Point";
                        coordinates: [number, number] | [number, number, number];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "MultiPoint";
                        coordinates: ([number, number] | [number, number, number])[];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "Polygon";
                        coordinates: ([number, number] | [number, number, number])[][];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | {
                        type: "MultiPolygon";
                        coordinates: ([number, number] | [number, number, number])[][][];
                        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                    } | import("./geojson/geometry.js").GeoJsonGeometryCollection)[];
                }) | null;
                properties: Record<string, import("./json/json.js").Json> | null;
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                id?: string | number | undefined;
            }[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>]>;
        boundingBox: typeof import("./geojson/bounding-box.js").boundingBox;
        feature: typeof import("./geojson/feature.js").feature;
        featureCollection: typeof import("./geojson/feature-collection.js").featureCollection;
        geometryCollection: typeof import("./geojson/geometry.js").geometryCollection;
        lineString: typeof import("./geojson/line-string.js").lineString;
        multiLineString: typeof import("./geojson/multi-line-string.js").multiLineString;
        multiPoint: typeof import("./geojson/multi-point.js").multiPoint;
        multiPolygon: typeof import("./geojson/multi-polygon.js").multiPolygon;
        point: typeof import("./geojson/point.js").point;
        polygon: typeof import("./geojson/polygon.js").polygon;
        coordinate: typeof import("./geojson/coordinate.js").coordinate;
    };
    json: {
        (): import("zod").ZodType<import("./json/json.js").Json, import("zod").ZodTypeDef, import("./json/json.js").Json>;
        array: typeof import("./json/json.js").array;
        object: typeof import("./json/json.js").object;
        primitive: typeof import("./json/json.js").primitive;
        stringified: typeof import("./json/json.js").stringifiedJson;
    };
};
export { zu };
