import { z } from "zod";
import { schemaWithBoundingBox } from "./base.js";
export type GeoJsonGeometryCollection = z.infer<typeof schemaWithBoundingBox> & {
    type: "GeometryCollection";
    geometries: Array<z.infer<typeof geometrySchema>>;
};
export declare function geometryCollection(): z.ZodType<GeoJsonGeometryCollection, z.ZodTypeDef, GeoJsonGeometryCollection>;
declare const geometrySchema: z.ZodUnion<[z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"LineString">;
    coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
}, "strict", z.ZodTypeAny, {
    type: "LineString";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "LineString";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"MultiLineString">;
    coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
}, "strict", z.ZodTypeAny, {
    type: "MultiLineString";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "MultiLineString";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"MultiPoint">;
    coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
}, "strict", z.ZodTypeAny, {
    type: "MultiPoint";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "MultiPoint";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"MultiPolygon">;
    coordinates: z.ZodArray<z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">, "many">;
}, "strict", z.ZodTypeAny, {
    type: "MultiPolygon";
    coordinates: ([number, number] | [number, number, number])[][][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "MultiPolygon";
    coordinates: ([number, number] | [number, number, number])[][][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"Point">;
    coordinates: z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>;
}, "strict", z.ZodTypeAny, {
    type: "Point";
    coordinates: [number, number] | [number, number, number];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "Point";
    coordinates: [number, number] | [number, number, number];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"Polygon">;
    coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
}, "strict", z.ZodTypeAny, {
    type: "Polygon";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "Polygon";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodType<GeoJsonGeometryCollection, z.ZodTypeDef, GeoJsonGeometryCollection>]>;
export type GeoJsonGeometry = z.infer<typeof geometrySchema>;
export declare function geometry(): z.ZodUnion<[z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"LineString">;
    coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
}, "strict", z.ZodTypeAny, {
    type: "LineString";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "LineString";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"MultiLineString">;
    coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
}, "strict", z.ZodTypeAny, {
    type: "MultiLineString";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "MultiLineString";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"MultiPoint">;
    coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
}, "strict", z.ZodTypeAny, {
    type: "MultiPoint";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "MultiPoint";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"MultiPolygon">;
    coordinates: z.ZodArray<z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">, "many">;
}, "strict", z.ZodTypeAny, {
    type: "MultiPolygon";
    coordinates: ([number, number] | [number, number, number])[][][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "MultiPolygon";
    coordinates: ([number, number] | [number, number, number])[][][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"Point">;
    coordinates: z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>;
}, "strict", z.ZodTypeAny, {
    type: "Point";
    coordinates: [number, number] | [number, number, number];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "Point";
    coordinates: [number, number] | [number, number, number];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"Polygon">;
    coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
}, "strict", z.ZodTypeAny, {
    type: "Polygon";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "Polygon";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodType<GeoJsonGeometryCollection, z.ZodTypeDef, GeoJsonGeometryCollection>]>;
export {};
