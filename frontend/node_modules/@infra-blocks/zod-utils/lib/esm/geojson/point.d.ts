import { z } from "zod";
declare const pointSchema: z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"Point">;
    coordinates: z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>;
}, "strict", z.ZodTypeAny, {
    type: "Point";
    coordinates: [number, number] | [number, number, number];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "Point";
    coordinates: [number, number] | [number, number, number];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>;
export type GeoJsonPoint = z.infer<typeof pointSchema>;
export declare function point(): z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"Point">;
    coordinates: z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>;
}, "strict", z.ZodTypeAny, {
    type: "Point";
    coordinates: [number, number] | [number, number, number];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "Point";
    coordinates: [number, number] | [number, number, number];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>;
export {};
