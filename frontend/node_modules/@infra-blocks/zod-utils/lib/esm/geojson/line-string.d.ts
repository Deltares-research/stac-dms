import { z } from "zod";
declare const lineStringSchema: z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"LineString">;
    coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
}, "strict", z.ZodTypeAny, {
    type: "LineString";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "LineString";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>;
export type GeoJsonLineString = z.infer<typeof lineStringSchema>;
export declare function lineString(): z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"LineString">;
    coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
}, "strict", z.ZodTypeAny, {
    type: "LineString";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "LineString";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>;
export {};
