import { z } from "zod";
declare const multiLineStringSchema: z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"MultiLineString">;
    coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
}, "strict", z.ZodTypeAny, {
    type: "MultiLineString";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "MultiLineString";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>;
export type GeoJsonMultiLineString = z.infer<typeof multiLineStringSchema>;
export declare function multiLineString(): z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"MultiLineString">;
    coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
}, "strict", z.ZodTypeAny, {
    type: "MultiLineString";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "MultiLineString";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>;
export {};
