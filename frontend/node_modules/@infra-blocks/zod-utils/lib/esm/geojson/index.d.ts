import { GeoJsonBoundingBox, boundingBox } from "./bounding-box.js";
import { featureCollection, GeoJsonFeatureCollection } from "./feature-collection.js";
import { GeoJsonFeature, feature } from "./feature.js";
import { GeoJson } from "./geojson.js";
import { GeoJsonGeometry, geometryCollection } from "./geometry.js";
import { GeoJsonLineString, lineString } from "./line-string.js";
import { GeoJsonMultiLineString, multiLineString } from "./multi-line-string.js";
import { GeoJsonMultiPoint, multiPoint } from "./multi-point.js";
import { GeoJsonMultiPolygon, multiPolygon } from "./multi-polygon.js";
import { GeoJsonPoint, point } from "./point.js";
import { GeoJsonPolygon, polygon } from "./polygon.js";
import { GeoJsonCoordinate, coordinate } from "./coordinate.js";
declare const module: {
    (): import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodObject<{
        bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
        type: import("zod").ZodLiteral<"LineString">;
        coordinates: import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">;
    }, "strict", import("zod").ZodTypeAny, {
        type: "LineString";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "LineString";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, import("zod").ZodObject<{
        bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
        type: import("zod").ZodLiteral<"MultiLineString">;
        coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">;
    }, "strict", import("zod").ZodTypeAny, {
        type: "MultiLineString";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "MultiLineString";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, import("zod").ZodObject<{
        bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
        type: import("zod").ZodLiteral<"MultiPoint">;
        coordinates: import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">;
    }, "strict", import("zod").ZodTypeAny, {
        type: "MultiPoint";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "MultiPoint";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, import("zod").ZodObject<{
        bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
        type: import("zod").ZodLiteral<"MultiPolygon">;
        coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">, "many">;
    }, "strict", import("zod").ZodTypeAny, {
        type: "MultiPolygon";
        coordinates: ([number, number] | [number, number, number])[][][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "MultiPolygon";
        coordinates: ([number, number] | [number, number, number])[][][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, import("zod").ZodObject<{
        bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
        type: import("zod").ZodLiteral<"Point">;
        coordinates: import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>;
    }, "strict", import("zod").ZodTypeAny, {
        type: "Point";
        coordinates: [number, number] | [number, number, number];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "Point";
        coordinates: [number, number] | [number, number, number];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, import("zod").ZodObject<{
        bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
        type: import("zod").ZodLiteral<"Polygon">;
        coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">;
    }, "strict", import("zod").ZodTypeAny, {
        type: "Polygon";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "Polygon";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, import("zod").ZodType<import("./geometry.js").GeoJsonGeometryCollection, import("zod").ZodTypeDef, import("./geometry.js").GeoJsonGeometryCollection>]>, import("zod").ZodObject<{
        bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
        type: import("zod").ZodLiteral<"Feature">;
        geometry: import("zod").ZodNullable<import("zod").ZodUnion<[import("zod").ZodObject<{
            bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
            type: import("zod").ZodLiteral<"LineString">;
            coordinates: import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">;
        }, "strict", import("zod").ZodTypeAny, {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, import("zod").ZodObject<{
            bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
            type: import("zod").ZodLiteral<"MultiLineString">;
            coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">;
        }, "strict", import("zod").ZodTypeAny, {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, import("zod").ZodObject<{
            bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
            type: import("zod").ZodLiteral<"MultiPoint">;
            coordinates: import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">;
        }, "strict", import("zod").ZodTypeAny, {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, import("zod").ZodObject<{
            bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
            type: import("zod").ZodLiteral<"MultiPolygon">;
            coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">, "many">;
        }, "strict", import("zod").ZodTypeAny, {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, import("zod").ZodObject<{
            bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
            type: import("zod").ZodLiteral<"Point">;
            coordinates: import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>;
        }, "strict", import("zod").ZodTypeAny, {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, import("zod").ZodObject<{
            bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
            type: import("zod").ZodLiteral<"Polygon">;
            coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">;
        }, "strict", import("zod").ZodTypeAny, {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, import("zod").ZodType<import("./geometry.js").GeoJsonGeometryCollection, import("zod").ZodTypeDef, import("./geometry.js").GeoJsonGeometryCollection>]>>;
        id: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>>;
        properties: import("zod").ZodNullable<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodType<import("../json/json.js").Json, import("zod").ZodTypeDef, import("../json/json.js").Json>>>;
    }, "strict", import("zod").ZodTypeAny, {
        type: "Feature";
        geometry: {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | ({
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } & {
            type: "GeometryCollection";
            geometries: ({
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | import("./geometry.js").GeoJsonGeometryCollection)[];
        }) | null;
        properties: Record<string, import("../json/json.js").Json> | null;
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        id?: string | number | undefined;
    }, {
        type: "Feature";
        geometry: {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | ({
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } & {
            type: "GeometryCollection";
            geometries: ({
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | import("./geometry.js").GeoJsonGeometryCollection)[];
        }) | null;
        properties: Record<string, import("../json/json.js").Json> | null;
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        id?: string | number | undefined;
    }>, import("zod").ZodObject<{
        bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
        type: import("zod").ZodLiteral<"FeatureCollection">;
        features: import("zod").ZodArray<import("zod").ZodObject<{
            bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
            type: import("zod").ZodLiteral<"Feature">;
            geometry: import("zod").ZodNullable<import("zod").ZodUnion<[import("zod").ZodObject<{
                bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                type: import("zod").ZodLiteral<"LineString">;
                coordinates: import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">;
            }, "strict", import("zod").ZodTypeAny, {
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }, {
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }>, import("zod").ZodObject<{
                bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                type: import("zod").ZodLiteral<"MultiLineString">;
                coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">;
            }, "strict", import("zod").ZodTypeAny, {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }, {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }>, import("zod").ZodObject<{
                bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                type: import("zod").ZodLiteral<"MultiPoint">;
                coordinates: import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">;
            }, "strict", import("zod").ZodTypeAny, {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }, {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }>, import("zod").ZodObject<{
                bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                type: import("zod").ZodLiteral<"MultiPolygon">;
                coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">, "many">;
            }, "strict", import("zod").ZodTypeAny, {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }, {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }>, import("zod").ZodObject<{
                bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                type: import("zod").ZodLiteral<"Point">;
                coordinates: import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>;
            }, "strict", import("zod").ZodTypeAny, {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }, {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }>, import("zod").ZodObject<{
                bbox: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>>;
                type: import("zod").ZodLiteral<"Polygon">;
                coordinates: import("zod").ZodArray<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber], null>, import("zod").ZodTuple<[import("zod").ZodNumber, import("zod").ZodNumber, import("zod").ZodNumber], null>]>, "many">, "many">;
            }, "strict", import("zod").ZodTypeAny, {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }, {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            }>, import("zod").ZodType<import("./geometry.js").GeoJsonGeometryCollection, import("zod").ZodTypeDef, import("./geometry.js").GeoJsonGeometryCollection>]>>;
            id: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>>;
            properties: import("zod").ZodNullable<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodType<import("../json/json.js").Json, import("zod").ZodTypeDef, import("../json/json.js").Json>>>;
        }, "strict", import("zod").ZodTypeAny, {
            type: "Feature";
            geometry: {
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | ({
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } & {
                type: "GeometryCollection";
                geometries: ({
                    type: "LineString";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiLineString";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Point";
                    coordinates: [number, number] | [number, number, number];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPoint";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Polygon";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPolygon";
                    coordinates: ([number, number] | [number, number, number])[][][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | import("./geometry.js").GeoJsonGeometryCollection)[];
            }) | null;
            properties: Record<string, import("../json/json.js").Json> | null;
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            id?: string | number | undefined;
        }, {
            type: "Feature";
            geometry: {
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | ({
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } & {
                type: "GeometryCollection";
                geometries: ({
                    type: "LineString";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiLineString";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Point";
                    coordinates: [number, number] | [number, number, number];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPoint";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Polygon";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPolygon";
                    coordinates: ([number, number] | [number, number, number])[][][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | import("./geometry.js").GeoJsonGeometryCollection)[];
            }) | null;
            properties: Record<string, import("../json/json.js").Json> | null;
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            id?: string | number | undefined;
        }>, "many">;
    }, "strict", import("zod").ZodTypeAny, {
        type: "FeatureCollection";
        features: {
            type: "Feature";
            geometry: {
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | ({
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } & {
                type: "GeometryCollection";
                geometries: ({
                    type: "LineString";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiLineString";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Point";
                    coordinates: [number, number] | [number, number, number];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPoint";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Polygon";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPolygon";
                    coordinates: ([number, number] | [number, number, number])[][][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | import("./geometry.js").GeoJsonGeometryCollection)[];
            }) | null;
            properties: Record<string, import("../json/json.js").Json> | null;
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            id?: string | number | undefined;
        }[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "FeatureCollection";
        features: {
            type: "Feature";
            geometry: {
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | ({
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } & {
                type: "GeometryCollection";
                geometries: ({
                    type: "LineString";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiLineString";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Point";
                    coordinates: [number, number] | [number, number, number];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPoint";
                    coordinates: ([number, number] | [number, number, number])[];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "Polygon";
                    coordinates: ([number, number] | [number, number, number])[][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | {
                    type: "MultiPolygon";
                    coordinates: ([number, number] | [number, number, number])[][][];
                    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
                } | import("./geometry.js").GeoJsonGeometryCollection)[];
            }) | null;
            properties: Record<string, import("../json/json.js").Json> | null;
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            id?: string | number | undefined;
        }[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>]>;
    boundingBox: typeof boundingBox;
    feature: typeof feature;
    featureCollection: typeof featureCollection;
    geometryCollection: typeof geometryCollection;
    lineString: typeof lineString;
    multiLineString: typeof multiLineString;
    multiPoint: typeof multiPoint;
    multiPolygon: typeof multiPolygon;
    point: typeof point;
    polygon: typeof polygon;
    coordinate: typeof coordinate;
};
export { module as geojson };
export type { GeoJsonBoundingBox, GeoJsonFeature, GeoJsonFeatureCollection, GeoJsonGeometry, GeoJson, GeoJsonLineString, GeoJsonMultiLineString, GeoJsonMultiPoint, GeoJsonMultiPolygon, GeoJsonPoint, GeoJsonPolygon, GeoJsonCoordinate, };
