import { z } from "zod";
declare const geojsonSchema: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"LineString">;
    coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
}, "strict", z.ZodTypeAny, {
    type: "LineString";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "LineString";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"MultiLineString">;
    coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
}, "strict", z.ZodTypeAny, {
    type: "MultiLineString";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "MultiLineString";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"MultiPoint">;
    coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
}, "strict", z.ZodTypeAny, {
    type: "MultiPoint";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "MultiPoint";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"MultiPolygon">;
    coordinates: z.ZodArray<z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">, "many">;
}, "strict", z.ZodTypeAny, {
    type: "MultiPolygon";
    coordinates: ([number, number] | [number, number, number])[][][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "MultiPolygon";
    coordinates: ([number, number] | [number, number, number])[][][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"Point">;
    coordinates: z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>;
}, "strict", z.ZodTypeAny, {
    type: "Point";
    coordinates: [number, number] | [number, number, number];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "Point";
    coordinates: [number, number] | [number, number, number];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"Polygon">;
    coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
}, "strict", z.ZodTypeAny, {
    type: "Polygon";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "Polygon";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodType<import("./geometry.js").GeoJsonGeometryCollection, z.ZodTypeDef, import("./geometry.js").GeoJsonGeometryCollection>]>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"Feature">;
    geometry: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
        bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
        type: z.ZodLiteral<"LineString">;
        coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
    }, "strict", z.ZodTypeAny, {
        type: "LineString";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "LineString";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, z.ZodObject<{
        bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
        type: z.ZodLiteral<"MultiLineString">;
        coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
    }, "strict", z.ZodTypeAny, {
        type: "MultiLineString";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "MultiLineString";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, z.ZodObject<{
        bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
        type: z.ZodLiteral<"MultiPoint">;
        coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
    }, "strict", z.ZodTypeAny, {
        type: "MultiPoint";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "MultiPoint";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, z.ZodObject<{
        bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
        type: z.ZodLiteral<"MultiPolygon">;
        coordinates: z.ZodArray<z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">, "many">;
    }, "strict", z.ZodTypeAny, {
        type: "MultiPolygon";
        coordinates: ([number, number] | [number, number, number])[][][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "MultiPolygon";
        coordinates: ([number, number] | [number, number, number])[][][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, z.ZodObject<{
        bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
        type: z.ZodLiteral<"Point">;
        coordinates: z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>;
    }, "strict", z.ZodTypeAny, {
        type: "Point";
        coordinates: [number, number] | [number, number, number];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "Point";
        coordinates: [number, number] | [number, number, number];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, z.ZodObject<{
        bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
        type: z.ZodLiteral<"Polygon">;
        coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
    }, "strict", z.ZodTypeAny, {
        type: "Polygon";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "Polygon";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, z.ZodType<import("./geometry.js").GeoJsonGeometryCollection, z.ZodTypeDef, import("./geometry.js").GeoJsonGeometryCollection>]>>;
    id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    properties: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodType<import("../json/json.js").Json, z.ZodTypeDef, import("../json/json.js").Json>>>;
}, "strict", z.ZodTypeAny, {
    type: "Feature";
    geometry: {
        type: "LineString";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "MultiLineString";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "Point";
        coordinates: [number, number] | [number, number, number];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "MultiPoint";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "Polygon";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "MultiPolygon";
        coordinates: ([number, number] | [number, number, number])[][][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | ({
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } & {
        type: "GeometryCollection";
        geometries: ({
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | import("./geometry.js").GeoJsonGeometryCollection)[];
    }) | null;
    properties: Record<string, import("../json/json.js").Json> | null;
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    id?: string | number | undefined;
}, {
    type: "Feature";
    geometry: {
        type: "LineString";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "MultiLineString";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "Point";
        coordinates: [number, number] | [number, number, number];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "MultiPoint";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "Polygon";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "MultiPolygon";
        coordinates: ([number, number] | [number, number, number])[][][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | ({
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } & {
        type: "GeometryCollection";
        geometries: ({
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | import("./geometry.js").GeoJsonGeometryCollection)[];
    }) | null;
    properties: Record<string, import("../json/json.js").Json> | null;
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    id?: string | number | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"FeatureCollection">;
    features: z.ZodArray<z.ZodObject<{
        bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
        type: z.ZodLiteral<"Feature">;
        geometry: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
            type: z.ZodLiteral<"LineString">;
            coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
        }, "strict", z.ZodTypeAny, {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, z.ZodObject<{
            bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
            type: z.ZodLiteral<"MultiLineString">;
            coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
        }, "strict", z.ZodTypeAny, {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, z.ZodObject<{
            bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
            type: z.ZodLiteral<"MultiPoint">;
            coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
        }, "strict", z.ZodTypeAny, {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, z.ZodObject<{
            bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
            type: z.ZodLiteral<"MultiPolygon">;
            coordinates: z.ZodArray<z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">, "many">;
        }, "strict", z.ZodTypeAny, {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, z.ZodObject<{
            bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
            type: z.ZodLiteral<"Point">;
            coordinates: z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>;
        }, "strict", z.ZodTypeAny, {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, z.ZodObject<{
            bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
            type: z.ZodLiteral<"Polygon">;
            coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
        }, "strict", z.ZodTypeAny, {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, z.ZodType<import("./geometry.js").GeoJsonGeometryCollection, z.ZodTypeDef, import("./geometry.js").GeoJsonGeometryCollection>]>>;
        id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        properties: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodType<import("../json/json.js").Json, z.ZodTypeDef, import("../json/json.js").Json>>>;
    }, "strict", z.ZodTypeAny, {
        type: "Feature";
        geometry: {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | ({
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } & {
            type: "GeometryCollection";
            geometries: ({
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | import("./geometry.js").GeoJsonGeometryCollection)[];
        }) | null;
        properties: Record<string, import("../json/json.js").Json> | null;
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        id?: string | number | undefined;
    }, {
        type: "Feature";
        geometry: {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | ({
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } & {
            type: "GeometryCollection";
            geometries: ({
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | import("./geometry.js").GeoJsonGeometryCollection)[];
        }) | null;
        properties: Record<string, import("../json/json.js").Json> | null;
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        id?: string | number | undefined;
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    type: "FeatureCollection";
    features: {
        type: "Feature";
        geometry: {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | ({
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } & {
            type: "GeometryCollection";
            geometries: ({
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | import("./geometry.js").GeoJsonGeometryCollection)[];
        }) | null;
        properties: Record<string, import("../json/json.js").Json> | null;
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        id?: string | number | undefined;
    }[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "FeatureCollection";
    features: {
        type: "Feature";
        geometry: {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | ({
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } & {
            type: "GeometryCollection";
            geometries: ({
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | import("./geometry.js").GeoJsonGeometryCollection)[];
        }) | null;
        properties: Record<string, import("../json/json.js").Json> | null;
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        id?: string | number | undefined;
    }[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>]>;
export type GeoJson = z.infer<typeof geojsonSchema>;
export declare function geojson(): z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"LineString">;
    coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
}, "strict", z.ZodTypeAny, {
    type: "LineString";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "LineString";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"MultiLineString">;
    coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
}, "strict", z.ZodTypeAny, {
    type: "MultiLineString";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "MultiLineString";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"MultiPoint">;
    coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
}, "strict", z.ZodTypeAny, {
    type: "MultiPoint";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "MultiPoint";
    coordinates: ([number, number] | [number, number, number])[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"MultiPolygon">;
    coordinates: z.ZodArray<z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">, "many">;
}, "strict", z.ZodTypeAny, {
    type: "MultiPolygon";
    coordinates: ([number, number] | [number, number, number])[][][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "MultiPolygon";
    coordinates: ([number, number] | [number, number, number])[][][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"Point">;
    coordinates: z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>;
}, "strict", z.ZodTypeAny, {
    type: "Point";
    coordinates: [number, number] | [number, number, number];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "Point";
    coordinates: [number, number] | [number, number, number];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"Polygon">;
    coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
}, "strict", z.ZodTypeAny, {
    type: "Polygon";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "Polygon";
    coordinates: ([number, number] | [number, number, number])[][];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>, z.ZodType<import("./geometry.js").GeoJsonGeometryCollection, z.ZodTypeDef, import("./geometry.js").GeoJsonGeometryCollection>]>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"Feature">;
    geometry: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
        bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
        type: z.ZodLiteral<"LineString">;
        coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
    }, "strict", z.ZodTypeAny, {
        type: "LineString";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "LineString";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, z.ZodObject<{
        bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
        type: z.ZodLiteral<"MultiLineString">;
        coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
    }, "strict", z.ZodTypeAny, {
        type: "MultiLineString";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "MultiLineString";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, z.ZodObject<{
        bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
        type: z.ZodLiteral<"MultiPoint">;
        coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
    }, "strict", z.ZodTypeAny, {
        type: "MultiPoint";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "MultiPoint";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, z.ZodObject<{
        bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
        type: z.ZodLiteral<"MultiPolygon">;
        coordinates: z.ZodArray<z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">, "many">;
    }, "strict", z.ZodTypeAny, {
        type: "MultiPolygon";
        coordinates: ([number, number] | [number, number, number])[][][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "MultiPolygon";
        coordinates: ([number, number] | [number, number, number])[][][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, z.ZodObject<{
        bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
        type: z.ZodLiteral<"Point">;
        coordinates: z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>;
    }, "strict", z.ZodTypeAny, {
        type: "Point";
        coordinates: [number, number] | [number, number, number];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "Point";
        coordinates: [number, number] | [number, number, number];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, z.ZodObject<{
        bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
        type: z.ZodLiteral<"Polygon">;
        coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
    }, "strict", z.ZodTypeAny, {
        type: "Polygon";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }, {
        type: "Polygon";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    }>, z.ZodType<import("./geometry.js").GeoJsonGeometryCollection, z.ZodTypeDef, import("./geometry.js").GeoJsonGeometryCollection>]>>;
    id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    properties: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodType<import("../json/json.js").Json, z.ZodTypeDef, import("../json/json.js").Json>>>;
}, "strict", z.ZodTypeAny, {
    type: "Feature";
    geometry: {
        type: "LineString";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "MultiLineString";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "Point";
        coordinates: [number, number] | [number, number, number];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "MultiPoint";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "Polygon";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "MultiPolygon";
        coordinates: ([number, number] | [number, number, number])[][][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | ({
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } & {
        type: "GeometryCollection";
        geometries: ({
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | import("./geometry.js").GeoJsonGeometryCollection)[];
    }) | null;
    properties: Record<string, import("../json/json.js").Json> | null;
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    id?: string | number | undefined;
}, {
    type: "Feature";
    geometry: {
        type: "LineString";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "MultiLineString";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "Point";
        coordinates: [number, number] | [number, number, number];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "MultiPoint";
        coordinates: ([number, number] | [number, number, number])[];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "Polygon";
        coordinates: ([number, number] | [number, number, number])[][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | {
        type: "MultiPolygon";
        coordinates: ([number, number] | [number, number, number])[][][];
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } | ({
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    } & {
        type: "GeometryCollection";
        geometries: ({
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | import("./geometry.js").GeoJsonGeometryCollection)[];
    }) | null;
    properties: Record<string, import("../json/json.js").Json> | null;
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
    id?: string | number | undefined;
}>, z.ZodObject<{
    bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
    type: z.ZodLiteral<"FeatureCollection">;
    features: z.ZodArray<z.ZodObject<{
        bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
        type: z.ZodLiteral<"Feature">;
        geometry: z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
            type: z.ZodLiteral<"LineString">;
            coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
        }, "strict", z.ZodTypeAny, {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, z.ZodObject<{
            bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
            type: z.ZodLiteral<"MultiLineString">;
            coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
        }, "strict", z.ZodTypeAny, {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, z.ZodObject<{
            bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
            type: z.ZodLiteral<"MultiPoint">;
            coordinates: z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">;
        }, "strict", z.ZodTypeAny, {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, z.ZodObject<{
            bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
            type: z.ZodLiteral<"MultiPolygon">;
            coordinates: z.ZodArray<z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">, "many">;
        }, "strict", z.ZodTypeAny, {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, z.ZodObject<{
            bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
            type: z.ZodLiteral<"Point">;
            coordinates: z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>;
        }, "strict", z.ZodTypeAny, {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, z.ZodObject<{
            bbox: z.ZodOptional<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>>;
            type: z.ZodLiteral<"Polygon">;
            coordinates: z.ZodArray<z.ZodArray<z.ZodUnion<[z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>]>, "many">, "many">;
        }, "strict", z.ZodTypeAny, {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }, {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        }>, z.ZodType<import("./geometry.js").GeoJsonGeometryCollection, z.ZodTypeDef, import("./geometry.js").GeoJsonGeometryCollection>]>>;
        id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        properties: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodType<import("../json/json.js").Json, z.ZodTypeDef, import("../json/json.js").Json>>>;
    }, "strict", z.ZodTypeAny, {
        type: "Feature";
        geometry: {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | ({
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } & {
            type: "GeometryCollection";
            geometries: ({
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | import("./geometry.js").GeoJsonGeometryCollection)[];
        }) | null;
        properties: Record<string, import("../json/json.js").Json> | null;
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        id?: string | number | undefined;
    }, {
        type: "Feature";
        geometry: {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | ({
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } & {
            type: "GeometryCollection";
            geometries: ({
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | import("./geometry.js").GeoJsonGeometryCollection)[];
        }) | null;
        properties: Record<string, import("../json/json.js").Json> | null;
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        id?: string | number | undefined;
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    type: "FeatureCollection";
    features: {
        type: "Feature";
        geometry: {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | ({
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } & {
            type: "GeometryCollection";
            geometries: ({
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | import("./geometry.js").GeoJsonGeometryCollection)[];
        }) | null;
        properties: Record<string, import("../json/json.js").Json> | null;
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        id?: string | number | undefined;
    }[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}, {
    type: "FeatureCollection";
    features: {
        type: "Feature";
        geometry: {
            type: "LineString";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiLineString";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Point";
            coordinates: [number, number] | [number, number, number];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPoint";
            coordinates: ([number, number] | [number, number, number])[];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "Polygon";
            coordinates: ([number, number] | [number, number, number])[][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | {
            type: "MultiPolygon";
            coordinates: ([number, number] | [number, number, number])[][][];
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } | ({
            bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        } & {
            type: "GeometryCollection";
            geometries: ({
                type: "LineString";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiLineString";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Point";
                coordinates: [number, number] | [number, number, number];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPoint";
                coordinates: ([number, number] | [number, number, number])[];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "Polygon";
                coordinates: ([number, number] | [number, number, number])[][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | {
                type: "MultiPolygon";
                coordinates: ([number, number] | [number, number, number])[][][];
                bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
            } | import("./geometry.js").GeoJsonGeometryCollection)[];
        }) | null;
        properties: Record<string, import("../json/json.js").Json> | null;
        bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
        id?: string | number | undefined;
    }[];
    bbox?: [number, number, number, number] | [number, number, number, number, number, number] | undefined;
}>]>;
export {};
