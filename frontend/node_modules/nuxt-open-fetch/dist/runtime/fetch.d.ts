import type { FetchContext, FetchError, FetchOptions } from 'ofetch';
import type { ErrorResponse, FilterKeys, MediaType, OperationRequestBodyContent, ResponseObjectMap, SuccessResponse } from 'openapi-typescript-helpers';
export type FetchResponseData<T> = FilterKeys<SuccessResponse<ResponseObjectMap<T>>, MediaType>;
export type FetchResponseError<T> = FetchError<FilterKeys<ErrorResponse<ResponseObjectMap<T>>, MediaType>>;
export type MethodOption<M, P> = 'get' extends keyof P ? {
    method?: M;
} : {
    method: M;
};
export type ParamsOption<T> = T extends {
    parameters?: any;
    query?: any;
} ? T['parameters'] : Record<string, never>;
export type RequestBodyOption<T> = OperationRequestBodyContent<T> extends never ? {
    body?: never;
} : undefined extends OperationRequestBodyContent<T> ? {
    body?: OperationRequestBodyContent<T>;
} : {
    body: OperationRequestBodyContent<T>;
};
export type FilterMethods<T> = {
    [K in keyof Omit<T, 'parameters'> as T[K] extends never | undefined ? never : K]: T[K];
};
type OpenFetchOptions<Method, LowercasedMethod, Params, Operation = 'get' extends LowercasedMethod ? ('get' extends keyof Params ? Params['get'] : never) : LowercasedMethod extends keyof Params ? Params[LowercasedMethod] : never> = MethodOption<Method, Params> & ParamsOption<Operation> & RequestBodyOption<Operation> & Omit<FetchOptions, 'query' | 'body' | 'method'>;
export type OpenFetchClient<Paths> = <ReqT extends Extract<keyof Paths, string>, Methods extends FilterMethods<Paths[ReqT]>, Method extends Extract<keyof Methods, string> | Uppercase<Extract<keyof Methods, string>>, LowercasedMethod extends Lowercase<Method> extends keyof FilterMethods<Paths[ReqT]> ? Lowercase<Method> : never, DefaultMethod extends 'get' extends LowercasedMethod ? 'get' : LowercasedMethod, ResT = FetchResponseData<Paths[ReqT][DefaultMethod]>>(url: ReqT, options?: OpenFetchOptions<Method, LowercasedMethod, Methods>) => Promise<ResT>;
export declare function openFetchRequestInterceptor(ctx: FetchContext): void;
export declare function createOpenFetch<Paths>(options: FetchOptions | ((options: FetchOptions) => FetchOptions), localFetch?: typeof globalThis.$fetch): OpenFetchClient<Paths>;
export declare function fillPath(path: string, params?: object): string;
export {};
