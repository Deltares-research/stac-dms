export function openFetchRequestInterceptor(ctx) {
  ctx.request = fillPath(ctx.request, ctx.options.path);
}
export function createOpenFetch(options, localFetch) {
  return (url, opts) => {
    opts = typeof options === "function" ? options(opts) : {
      ...options,
      ...opts
    };
    const $fetch = getFetch(url, opts, localFetch);
    return $fetch(fillPath(url, opts?.path), opts);
  };
}
function getFetch(url, opts, localFetch) {
  if (import.meta.server && localFetch) {
    const isLocalFetch = url[0] === "/" && (!opts.baseURL || opts.baseURL[0] === "/");
    if (isLocalFetch)
      return localFetch;
  }
  return globalThis.$fetch;
}
export function fillPath(path, params = {}) {
  for (const [k, v] of Object.entries(params))
    path = path.replace(`{${k}}`, encodeURIComponent(String(v)));
  return path;
}
